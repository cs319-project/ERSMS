version: "3.1"

services:
  backend:
    image: ersms_backend
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - "5500"
      - "5501"
    volumes:
      - ./Backend:/ersms/Backend
      - ./ERSMS.sln:/ersms/ERSMS.sln
    depends_on:
      postgresdb:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - PGUSER=ersms
      - RUNNING_IN_CONTAINER=true
      - ERSMS_USE_POSTGRESQL=1
    networks:
      - ersms-network

  frontend:
    image: ersms_frontend
    build:
      context: .
      dockerfile: ./Frontend/Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./Frontend:/ersms/Frontend
      - ./proxy:/etc/nginx/conf.d
    networks:
      - ersms-network

  postgresdb:
    image: postgres
    environment:
      - POSTGRES_USER=ersmsdb
      - POSTGRES_PASSWORD=ersmsdb
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=ersms
    volumes:
      - ersmsdb:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ersmsdb -d ersms'"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - ersms-network

volumes:
  ersmsdb:
    name: ersmsdb

networks:
  ersms-network:
    driver: bridge
