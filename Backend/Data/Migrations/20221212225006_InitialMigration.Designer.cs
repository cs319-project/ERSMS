// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221212225006_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("Backend.Entities.Approval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfApproval")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Approval");
                });

            modelBuilder.Entity("Backend.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Backend.Entities.CTEForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ApprovalTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ChairApprovalId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeanApprovalId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Department")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ExchangeCoordinatorApprovalId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FacultyOfAdministrationBoardApprovalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HostUniversityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToDoItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChairApprovalId");

                    b.HasIndex("DeanApprovalId");

                    b.HasIndex("ExchangeCoordinatorApprovalId");

                    b.HasIndex("FacultyOfAdministrationBoardApprovalId");

                    b.HasIndex("StudentId");

                    b.ToTable("CTEForms");
                });

            modelBuilder.Entity("Backend.Entities.DomainUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("DomainUsers");
                });

            modelBuilder.Entity("Backend.Entities.EquivalanceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExemptedCourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InstructorApprovalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StudentId1")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Syllabus")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("ExemptedCourseId");

                    b.HasIndex("InstructorApprovalId");

                    b.HasIndex("StudentId1");

                    b.ToTable("EquivalanceRequests");
                });

            modelBuilder.Entity("Backend.Entities.ExemptedCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseName")
                        .HasColumnType("TEXT");

                    b.Property<int>("CourseType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ExemptedCourse");
                });

            modelBuilder.Entity("Backend.Entities.PlacedStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("CGPA")
                        .HasColumnType("REAL");

                    b.Property<string>("ExchangeSchool")
                        .HasColumnType("TEXT");

                    b.Property<double>("ExchangeScore")
                        .HasColumnType("REAL");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPlaced")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredSchools")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlacedStudents");
                });

            modelBuilder.Entity("Backend.Entities.PlacementTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ExcelFile")
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlacementTables");
                });

            modelBuilder.Entity("Backend.Entities.PreApprovalForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ApprovalTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Department")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ExchangeCoordinatorApprovalId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FacultyAdministrationBoardApprovalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HostUniversityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Semester")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToDoItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeCoordinatorApprovalId");

                    b.HasIndex("FacultyAdministrationBoardApprovalId");

                    b.HasIndex("StudentId");

                    b.ToTable("PreApprovalForms");
                });

            modelBuilder.Entity("Backend.Entities.RequestedCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RequestedCourseGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequestedCourseGroupId");

                    b.ToTable("RequestedCourse");
                });

            modelBuilder.Entity("Backend.Entities.RequestedCourseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PreApprovalFormId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RequestedExemptedCourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PreApprovalFormId");

                    b.HasIndex("RequestedExemptedCourseId");

                    b.ToTable("RequestedCourseGroup");
                });

            modelBuilder.Entity("Backend.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Backend.Entities.ToDoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CascadeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExchangeCoordinatorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeCoordinatorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("Backend.Entities.TransferredCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransferredCourseGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TransferredCourseGroupId");

                    b.ToTable("TransferredCourse");
                });

            modelBuilder.Entity("Backend.Entities.TransferredCourseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CTEFormId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExemptedCourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CTEFormId");

                    b.HasIndex("ExemptedCourseId");

                    b.ToTable("TransferredCourseGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Entities.Admin", b =>
                {
                    b.HasBaseType("Backend.Entities.DomainUser");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Backend.Entities.CourseCoordinatorInstructor", b =>
                {
                    b.HasBaseType("Backend.Entities.DomainUser");

                    b.Property<bool?>("IsCourseCoordinator")
                        .HasColumnType("INTEGER");

                    b.ToTable("CourseCoordinatorInstructors");
                });

            modelBuilder.Entity("Backend.Entities.DeanDepartmentChair", b =>
                {
                    b.HasBaseType("Backend.Entities.DomainUser");

                    b.Property<bool?>("IsDean")
                        .HasColumnType("INTEGER");

                    b.ToTable("DeanDepartmentChairs");
                });

            modelBuilder.Entity("Backend.Entities.ExchangeCoordinator", b =>
                {
                    b.HasBaseType("Backend.Entities.DomainUser");

                    b.ToTable("ExchangeCoordinators");
                });

            modelBuilder.Entity("Backend.Entities.OISEP", b =>
                {
                    b.HasBaseType("Backend.Entities.DomainUser");

                    b.ToTable("OISEPs");
                });

            modelBuilder.Entity("Backend.Entities.Student", b =>
                {
                    b.HasBaseType("Backend.Entities.DomainUser");

                    b.Property<double>("CGPA")
                        .HasColumnType("REAL");

                    b.Property<int>("EntranceYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExchangeSchool")
                        .HasColumnType("TEXT");

                    b.Property<double>("ExchangeScore")
                        .HasColumnType("REAL");

                    b.Property<string>("PreferredSchools")
                        .HasColumnType("TEXT");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Backend.Entities.CTEForm", b =>
                {
                    b.HasOne("Backend.Entities.Approval", "ChairApproval")
                        .WithMany()
                        .HasForeignKey("ChairApprovalId");

                    b.HasOne("Backend.Entities.Approval", "DeanApproval")
                        .WithMany()
                        .HasForeignKey("DeanApprovalId");

                    b.HasOne("Backend.Entities.Approval", "ExchangeCoordinatorApproval")
                        .WithMany()
                        .HasForeignKey("ExchangeCoordinatorApprovalId");

                    b.HasOne("Backend.Entities.Approval", "FacultyOfAdministrationBoardApproval")
                        .WithMany()
                        .HasForeignKey("FacultyOfAdministrationBoardApprovalId");

                    b.HasOne("Backend.Entities.Student", null)
                        .WithMany("CTEForms")
                        .HasForeignKey("StudentId");

                    b.Navigation("ChairApproval");

                    b.Navigation("DeanApproval");

                    b.Navigation("ExchangeCoordinatorApproval");

                    b.Navigation("FacultyOfAdministrationBoardApproval");
                });

            modelBuilder.Entity("Backend.Entities.DomainUser", b =>
                {
                    b.HasOne("Backend.Entities.AppUser", "IdentityUser")
                        .WithOne("DomainUser")
                        .HasForeignKey("Backend.Entities.DomainUser", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Backend.Entities.EquivalanceRequest", b =>
                {
                    b.HasOne("Backend.Entities.ExemptedCourse", "ExemptedCourse")
                        .WithMany()
                        .HasForeignKey("ExemptedCourseId");

                    b.HasOne("Backend.Entities.Approval", "InstructorApproval")
                        .WithMany()
                        .HasForeignKey("InstructorApprovalId");

                    b.HasOne("Backend.Entities.Student", null)
                        .WithMany("EquivalanceRequestForms")
                        .HasForeignKey("StudentId1");

                    b.Navigation("ExemptedCourse");

                    b.Navigation("InstructorApproval");
                });

            modelBuilder.Entity("Backend.Entities.PlacedStudent", b =>
                {
                    b.OwnsOne("Backend.Entities.DepartmentInfo", "Department", b1 =>
                        {
                            b1.Property<Guid>("PlacedStudentId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DepartmentName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("DepartmentName");

                            b1.Property<int>("FacultyName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("FacultyName");

                            b1.HasKey("PlacedStudentId");

                            b1.ToTable("PlacedStudents");

                            b1.WithOwner()
                                .HasForeignKey("PlacedStudentId");
                        });

                    b.OwnsOne("Backend.Entities.SemesterInfo", "PreferredSemester", b1 =>
                        {
                            b1.Property<Guid>("PlacedStudentId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AcademicYear")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Semester")
                                .HasColumnType("INTEGER");

                            b1.HasKey("PlacedStudentId");

                            b1.ToTable("PlacedStudents");

                            b1.WithOwner()
                                .HasForeignKey("PlacedStudentId");
                        });

                    b.Navigation("Department");

                    b.Navigation("PreferredSemester");
                });

            modelBuilder.Entity("Backend.Entities.PlacementTable", b =>
                {
                    b.OwnsOne("Backend.Entities.DepartmentInfo", "Department", b1 =>
                        {
                            b1.Property<Guid>("PlacementTableId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DepartmentName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("DepartmentName");

                            b1.Property<int>("FacultyName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("FacultyName");

                            b1.HasKey("PlacementTableId");

                            b1.ToTable("PlacementTables");

                            b1.WithOwner()
                                .HasForeignKey("PlacementTableId");
                        });

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Backend.Entities.PreApprovalForm", b =>
                {
                    b.HasOne("Backend.Entities.Approval", "ExchangeCoordinatorApproval")
                        .WithMany()
                        .HasForeignKey("ExchangeCoordinatorApprovalId");

                    b.HasOne("Backend.Entities.Approval", "FacultyAdministrationBoardApproval")
                        .WithMany()
                        .HasForeignKey("FacultyAdministrationBoardApprovalId");

                    b.HasOne("Backend.Entities.Student", null)
                        .WithMany("PreApprovalForms")
                        .HasForeignKey("StudentId");

                    b.Navigation("ExchangeCoordinatorApproval");

                    b.Navigation("FacultyAdministrationBoardApproval");
                });

            modelBuilder.Entity("Backend.Entities.RequestedCourse", b =>
                {
                    b.HasOne("Backend.Entities.RequestedCourseGroup", null)
                        .WithMany("RequestedCourses")
                        .HasForeignKey("RequestedCourseGroupId");
                });

            modelBuilder.Entity("Backend.Entities.RequestedCourseGroup", b =>
                {
                    b.HasOne("Backend.Entities.PreApprovalForm", null)
                        .WithMany("RequestedCourseGroups")
                        .HasForeignKey("PreApprovalFormId");

                    b.HasOne("Backend.Entities.ExemptedCourse", "RequestedExemptedCourse")
                        .WithMany()
                        .HasForeignKey("RequestedExemptedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedExemptedCourse");
                });

            modelBuilder.Entity("Backend.Entities.ToDoItem", b =>
                {
                    b.HasOne("Backend.Entities.ExchangeCoordinator", null)
                        .WithMany("ToDoList")
                        .HasForeignKey("ExchangeCoordinatorId");

                    b.HasOne("Backend.Entities.Student", null)
                        .WithMany("ToDoList")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Backend.Entities.TransferredCourse", b =>
                {
                    b.HasOne("Backend.Entities.TransferredCourseGroup", null)
                        .WithMany("TransferredCourses")
                        .HasForeignKey("TransferredCourseGroupId");
                });

            modelBuilder.Entity("Backend.Entities.TransferredCourseGroup", b =>
                {
                    b.HasOne("Backend.Entities.CTEForm", null)
                        .WithMany("TransferredCourseGroups")
                        .HasForeignKey("CTEFormId");

                    b.HasOne("Backend.Entities.ExemptedCourse", "ExemptedCourse")
                        .WithMany()
                        .HasForeignKey("ExemptedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExemptedCourse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Entities.Admin", b =>
                {
                    b.HasOne("Backend.Entities.DomainUser", null)
                        .WithOne()
                        .HasForeignKey("Backend.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Entities.CourseCoordinatorInstructor", b =>
                {
                    b.HasOne("Backend.Entities.DomainUser", null)
                        .WithOne()
                        .HasForeignKey("Backend.Entities.CourseCoordinatorInstructor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Entities.Course", "Course", b1 =>
                        {
                            b1.Property<Guid>("CourseCoordinatorInstructorId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CourseCode")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CourseName")
                                .HasColumnType("TEXT");

                            b1.HasKey("CourseCoordinatorInstructorId");

                            b1.ToTable("CourseCoordinatorInstructors");

                            b1.WithOwner()
                                .HasForeignKey("CourseCoordinatorInstructorId");
                        });

                    b.OwnsOne("Backend.Entities.DepartmentInfo", "Department", b1 =>
                        {
                            b1.Property<Guid>("CourseCoordinatorInstructorId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DepartmentName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("DepartmentName");

                            b1.Property<int>("FacultyName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("FacultyName");

                            b1.HasKey("CourseCoordinatorInstructorId");

                            b1.ToTable("CourseCoordinatorInstructors");

                            b1.WithOwner()
                                .HasForeignKey("CourseCoordinatorInstructorId");
                        });

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Backend.Entities.DeanDepartmentChair", b =>
                {
                    b.HasOne("Backend.Entities.DomainUser", null)
                        .WithOne()
                        .HasForeignKey("Backend.Entities.DeanDepartmentChair", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Entities.DepartmentInfo", "Department", b1 =>
                        {
                            b1.Property<Guid>("DeanDepartmentChairId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DepartmentName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("DepartmentName");

                            b1.Property<int>("FacultyName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("FacultyName");

                            b1.HasKey("DeanDepartmentChairId");

                            b1.ToTable("DeanDepartmentChairs");

                            b1.WithOwner()
                                .HasForeignKey("DeanDepartmentChairId");
                        });

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Backend.Entities.ExchangeCoordinator", b =>
                {
                    b.HasOne("Backend.Entities.DomainUser", null)
                        .WithOne()
                        .HasForeignKey("Backend.Entities.ExchangeCoordinator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Entities.DepartmentInfo", "Department", b1 =>
                        {
                            b1.Property<Guid>("ExchangeCoordinatorId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DepartmentName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("DepartmentName");

                            b1.Property<int>("FacultyName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("FacultyName");

                            b1.HasKey("ExchangeCoordinatorId");

                            b1.ToTable("ExchangeCoordinators");

                            b1.WithOwner()
                                .HasForeignKey("ExchangeCoordinatorId");
                        });

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Backend.Entities.OISEP", b =>
                {
                    b.HasOne("Backend.Entities.DomainUser", null)
                        .WithOne()
                        .HasForeignKey("Backend.Entities.OISEP", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Entities.Student", b =>
                {
                    b.HasOne("Backend.Entities.DomainUser", null)
                        .WithOne()
                        .HasForeignKey("Backend.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Entities.DepartmentInfo", "Major", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("DepartmentName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("DepartmentName");

                            b1.Property<int>("FacultyName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("FacultyName");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsMany("Backend.Entities.DepartmentInfo", "Minors", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DepartmentName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("DepartmentName");

                            b1.Property<int>("FacultyName")
                                .HasColumnType("INTEGER")
                                .HasColumnName("FacultyName");

                            b1.HasKey("StudentId", "Id");

                            b1.ToTable("Students_Minors");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("Backend.Entities.SemesterInfo", "PreferredSemester", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AcademicYear")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Semester")
                                .HasColumnType("INTEGER");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Major");

                    b.Navigation("Minors");

                    b.Navigation("PreferredSemester");
                });

            modelBuilder.Entity("Backend.Entities.AppUser", b =>
                {
                    b.Navigation("DomainUser");
                });

            modelBuilder.Entity("Backend.Entities.CTEForm", b =>
                {
                    b.Navigation("TransferredCourseGroups");
                });

            modelBuilder.Entity("Backend.Entities.PreApprovalForm", b =>
                {
                    b.Navigation("RequestedCourseGroups");
                });

            modelBuilder.Entity("Backend.Entities.RequestedCourseGroup", b =>
                {
                    b.Navigation("RequestedCourses");
                });

            modelBuilder.Entity("Backend.Entities.TransferredCourseGroup", b =>
                {
                    b.Navigation("TransferredCourses");
                });

            modelBuilder.Entity("Backend.Entities.ExchangeCoordinator", b =>
                {
                    b.Navigation("ToDoList");
                });

            modelBuilder.Entity("Backend.Entities.Student", b =>
                {
                    b.Navigation("CTEForms");

                    b.Navigation("EquivalanceRequestForms");

                    b.Navigation("PreApprovalForms");

                    b.Navigation("ToDoList");
                });
#pragma warning restore 612, 618
        }
    }
}
